
import java.util.ArrayList;
import java.util.Arrays;

/**
 * @author Steven Dao
 * @version 1.0
 *
 * Date: August 24, 2021
 * Purpose: To test the results received from the StudentSolver class.
 */
public class Main {

    /**
     * Tests the StudentSolver function using the provided test cases.
     * To add additional test cases, add to the provided containers as necessary.
     *
     * @param args the command-line arguments of the application
     */
    public static void main(String[] args) {

        int numOfTests = 0;
        int numOfTestsPassed = 0;
        ArrayList<int[][]> inputGrids = new ArrayList<>();
        ArrayList<int[][]> expectedGrids = new ArrayList<>();
        ArrayList<Integer> expectedCoins = new ArrayList<>();


        // test case 1 -------------------------------------------------------------------------------------------------
        ++numOfTests;
        inputGrids.add(new int[][] {
                {1, 2, 5, 3, 3},
                {2, 4, 1, 5, 1},
                {2, 1, 1, 5, 2},
                {1, 1, 5, 1, 3},
                {4, 3, 1, 5, 1}
        });
        expectedGrids.add(new int[][] {
                {1, 2, 5, 3, 3},
                {2, 4, 5, 5, 3},
                {2, 4, 5, 5, 3},
                {2, 4, 5, 5, 3},
                {4, 4, 4, 5, 1}
        });
        expectedCoins.add(26);

        // test case 2 -------------------------------------------------------------------------------------------------
        ++numOfTests;
        inputGrids.add(new int[][] {
                {1, 2, 5, 5, 5},
                {5, 3, 3, 5, 4},
                {2, 5, 2, 3, 3},
                {2, 1, 5, 2, 3},
                {1, 3, 5, 2, 3}
        });
        expectedGrids.add(new int[][] {
                {1, 2, 5, 5, 5},
                {5, 5, 5, 5, 4},
                {2, 5, 5, 3, 3},
                {2, 3, 5, 3, 3},
                {1, 3, 5, 3, 3}
        });
        expectedCoins.add(11);

        // test case 3 -------------------------------------------------------------------------------------------------
        ++numOfTests;
        inputGrids.add(new int[][] {
                { 4,  9,  3,  3,  5,  4,  6,  6, 10,  1},
                { 1,  3,  6,  3,  3,  6,  3,  8,  4,  4},
                { 2,  9,  3,  6, 10,  7,  8,  3, 10,  5},
                { 6,  1,  3,  4,  9,  3,  1,  1,  9,  5},
                {10,  9,  9,  8,  3,  5,  7,  7, 10,  8},
                { 2,  7,  8,  7,  4,  6,  8,  3,  1,  9},
                { 8,  1,  6,  2,  3,  4,  2,  5,  1,  7},
                { 8,  6,  4,  7,  6,  1,  7,  2,  9,  6},
                { 8,  3,  8,  6,  9,  6, 10, 10,  8,  3},
                {10,  7,  9,  1,  6,  2,  2,  1,  2,  6}
        });
        expectedGrids.add(new int[][] {
                { 4,  9,  9,  9,  9,  9,  9,  9, 10,  1},
                { 4,  9,  9,  9,  9,  9,  9,  9, 10,  4},
                { 4,  9,  9,  9, 10, 10, 10, 10, 10,  5},
                { 6,  9,  9,  9, 10, 10, 10, 10, 10,  5},
                {10, 10, 10, 10, 10, 10, 10, 10, 10,  8},
                {10, 10, 10, 10, 10, 10, 10, 10,  9,  9},
                {10, 10, 10, 10, 10, 10, 10, 10,  9,  7},
                {10, 10, 10, 10, 10, 10, 10, 10,  9,  6},
                {10, 10, 10, 10, 10, 10, 10, 10,  8,  6},
                {10,  9,  9,  6,  6,  6,  6,  6,  6,  6}
        });
        expectedCoins.add(344);

        // test case 4 -------------------------------------------------------------------------------------------------
        ++numOfTests;
        inputGrids.add(new int[][] {
                {15,  6,  8,  5,  7,  3, 20,  9, 11, 13,  8, 14, 14, 13,  8, 20,  6,  2, 18, 12},
                {16, 12, 13, 15, 17,  8,  8,  6,  2,  4,  3, 11, 17,  4,  7, 20, 12,  4,  7,  7},
                { 4,  8,  3,  6,  8, 11,  6, 12,  7,  9,  1,  6, 17,  9, 17, 12,  9,  2, 14, 16},
                {12, 20, 14,  6, 18,  3, 10, 13, 18, 17, 17, 18, 12, 18, 10, 15, 15,  2,  3, 11},
                { 6, 18,  4, 12, 16, 15, 15,  2, 19, 11, 19, 20, 14, 18,  3,  9, 19,  3, 15, 10},
                { 8, 17, 11, 19,  1,  5,  1,  7,  4, 13, 13,  8, 18, 13, 20,  4, 17, 14,  5, 19},
                {16,  1,  1, 10, 10, 19,  3, 14, 11,  8, 15,  6, 13,  8, 11,  9, 11,  6, 19,  8},
                {17, 20,  7, 16, 19,  8, 17, 17,  4, 14,  9,  8,  4,  7, 13, 15, 17,  2, 20,  6},
                {15, 14,  2,  5, 15, 19, 15,  5,  6,  9,  9, 17,  7, 12, 10, 15,  2,  2, 19, 15},
                {14, 16, 14, 16,  2, 16, 18, 13, 20, 11, 20,  8, 18, 20,  4,  7,  5,  5, 11, 19},
                { 8,  2, 15,  2, 15, 20, 17, 12, 19, 11,  6, 15,  5, 16, 17,  8,  2,  2, 18, 10},
                {13, 15, 15, 14, 13, 12, 16,  8, 19, 11, 13,  6, 12,  1,  1,  4, 11, 16, 20, 16},
                {13, 10,  1, 15, 10, 13,  4, 12,  9, 19, 11, 17,  6,  2, 16,  9, 19,  8, 12, 17},
                { 9, 16, 19, 15, 12,  2, 19, 17, 17,  9,  3,  3,  9,  5,  5,  9,  6,  3, 17, 11},
                { 7,  5, 18,  2, 17,  6,  6, 20, 13,  2, 14,  5,  2, 20,  4, 10, 16,  1,  4,  3},
                {11,  7, 15, 20, 10, 18, 18, 11, 15,  2, 12,  6, 11, 18, 14,  9, 16, 17, 12, 12},
                { 7,  8, 10,  4, 12, 16, 17, 15, 13,  6,  9, 12, 15,  1, 10,  8, 12,  2, 20, 15},
                { 7, 15,  3, 17,  2,  3, 13, 18, 13, 15, 19,  5,  8,  7,  6,  1, 14,  3,  8,  1},
                { 6, 20,  2,  2, 19, 19, 19,  6,  5,  9, 10, 12, 16, 18, 20,  4,  7,  4, 17, 10},
                {18,  7, 13,  7, 20, 19, 12, 19, 12, 10,  3,  4, 20,  5,  7,  4, 17,  1, 19, 12}
        });
        expectedGrids.add(new int[][] {
                {15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 18, 18, 12},
                {16, 16, 16, 16, 17, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 18, 18, 12},
                {16, 16, 16, 16, 17, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 18, 18, 16},
                {16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 18, 18, 16},
                {16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 18, 18, 16},
                {16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 19, 19, 19},
                {16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 19, 19, 19},
                {17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19},
                {17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19},
                {17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19},
                {17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17},
                {17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17},
                {17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17},
                {17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15},
                {17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15},
                {17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15},
                {17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15},
                {17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 12},
                {17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 12},
                {18, 18, 18, 18, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 19, 19, 12}
        });
        expectedCoins.add(3365);

        // test case 5 -------------------------------------------------------------------------------------------------
        ++numOfTests;
        inputGrids.add(new int[][] {
                { 4, 17, 24, 19, 13,  5, 16,  4,  5, 21, 14, 18,  7, 18, 10, 10, 13,  5, 10, 20, 17, 18, 24,  5,  1},
                { 9, 16,  2,  1, 13,  6, 15,  3, 16,  3, 20, 23, 12, 24, 23,  1, 24,  7, 18,  2,  4, 21,  2,  2,  6},
                {15, 14, 17,  6,  2, 20, 22, 20, 19, 14, 17, 10,  4,  3, 18,  7, 16, 20,  2, 12, 10,  7,  6,  5,  9},
                {13, 23,  3,  9,  6,  3,  1,  6,  5,  6,  5,  3, 22,  4, 24, 10,  9,  8, 11, 25, 11,  7, 23,  8,  9},
                {11,  6, 15, 21,  3,  3, 11, 20, 15, 20, 12,  2, 12, 20,  3, 11, 16, 15,  8, 23, 23, 12,  2, 22,  6},
                {25, 10, 25,  4, 23, 17, 20,  8,  9, 13, 25,  2,  8, 20,  8,  8,  4,  6, 14, 18,  8,  3, 18, 22, 18},
                { 1, 10,  3, 15, 15,  9, 14, 10,  6,  7, 15,  5, 19, 17, 16,  7, 11,  7,  5,  1, 12,  5, 21,  9, 18},
                {11,  6, 15, 25,  8,  4, 13,  1, 20, 14, 24, 19,  5, 14, 19, 17, 19, 20, 12, 25, 10, 11, 15, 23,  8},
                {25, 22, 22,  5, 17,  4, 20,  3, 13, 11,  3, 13,  3, 25, 11, 23, 21, 25, 17, 12, 12, 24, 12,  3, 25},
                {15, 22, 14, 18, 15,  6, 24,  1, 14, 17, 19,  6, 19, 12,  8, 10, 24, 20, 10, 21, 10, 25, 14,  6,  3},
                {10,  2, 16,  7, 17, 19, 15, 14, 21,  1, 21, 11,  7, 14,  5, 15, 11, 17, 19, 19, 21, 17,  1,  1,  3},
                { 7, 23,  7, 12,  7, 10, 22,  7,  1,  7, 13,  3,  5,  6, 21,  7,  8, 13, 20, 16,  7, 20, 17,  3, 20},
                {15,  5, 19, 11, 21,  6, 16, 20,  9, 23, 11,  3, 18,  7, 18,  2,  9,  1,  1,  1, 16,  4, 18,  8, 14},
                { 2,  1,  7, 13,  8, 24, 12, 18, 21,  2, 25, 12, 16,  8,  6,  9,  2, 21, 21,  6, 12,  5, 18, 14, 11},
                {23, 22,  2, 13, 23, 15,  8, 18, 10, 16,  8, 23, 20, 14,  5,  2,  2, 22, 17,  1, 23, 17, 18,  9, 22},
                {14, 14,  4, 17, 10, 20, 20, 11, 25, 19, 22,  5,  2, 24,  6,  8,  6,  1, 13,  2, 19, 12,  5, 12, 23},
                {16,  8, 10, 21, 11, 24, 11, 15, 19, 23, 14, 25,  3, 20,  3, 13, 17, 11, 17, 17, 24, 23, 16, 12, 14},
                {13, 22,  8, 15, 19, 16, 25, 22, 16, 14,  1, 24, 23,  5, 13, 21,  7, 23, 25,  5, 14, 12, 24,  9,  2},
                {15, 19,  4,  5,  9, 20, 17, 22, 17, 15, 15, 13, 12, 14, 18,  5,  3, 20,  5, 14, 19,  3, 20, 13, 16},
                { 8 ,25,  2, 17, 22, 18, 19, 22,  3, 12, 19,  6,  6,  5,  8, 20, 20, 13, 21, 23,  9,  9,  9, 12, 22},
                { 4,  1,  4, 25,  9, 24, 12, 24,  3,  9, 16, 12, 10, 17, 23,  1,  4, 18,  1,  7, 23,  2, 20, 23, 18},
                {13, 18, 11, 12, 17,  9,  9, 17, 14, 20,  7, 22, 15, 22, 22, 14, 12,  9, 12,  1, 10,  1, 13,  1, 21},
                {25, 15, 11, 19, 22, 25, 22,  3, 20, 11, 16, 25,  7, 11, 16, 12, 23, 21,  9, 15, 17,  1,  3,  1,  2},
                {23, 16,  4,  6, 19, 12, 23,  8,  7, 10, 11,  5,  2, 17, 11, 12, 19, 20,  4,  6, 15, 10,  2, 18, 13},
                {12, 17, 19, 23,  6,  7, 10, 13, 20,  5, 22, 25, 17, 14, 24, 11,  1, 12,  7,  1, 13,  8,  5, 19, 14}
        });
        expectedGrids.add(new int[][] {
                { 4, 17, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  5,  1},
                { 9, 17, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  6,  6},
                {15, 17, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  9,  9},
                {15, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 24, 24, 24,  9,  9},
                {15, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 24, 24, 24, 22,  9},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 22, 18},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 22, 18},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 23, 18},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 23, 23},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 24, 23, 23},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 24, 23, 23},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 24, 23, 23},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 24, 23, 23},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 24, 23, 23},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 24, 23, 23},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 24, 23, 22},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 24, 23, 22},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 22},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 22},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 21},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 23, 23, 21, 21, 21, 21, 21, 21, 21, 21},
                {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 23, 23, 21, 19, 19, 19, 19, 19, 19, 14},
                {23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 25, 24, 24, 24, 20, 20, 20, 19, 19, 19, 19, 19, 19, 14},
                {12, 17, 19, 23, 23, 23, 23, 23, 23, 23, 23, 25, 24, 24, 24, 19, 19, 19, 19, 19, 19, 19, 19, 19, 14}
        });
        expectedCoins.add(6784);


        boolean[] inputsPassed = new boolean[numOfTests];
        double[] testTimes = new double[numOfTests];


        System.out.println("""
                
                =======================================================================================
                                                Testing CoinStacks ...
                =======================================================================================""");


        for (int currentIndex = 0; currentIndex < numOfTests; ++currentIndex) {
            int testNumber = currentIndex + 1;
            int[][] inputGrid = inputGrids.get(currentIndex);
            int[][] expectedGrid = expectedGrids.get(currentIndex);
            int expectedNumCoins = expectedCoins.get(currentIndex);

            System.out.printf("""
                    
                    -------------------------------
                             Input Grid %s
                    -------------------------------
                    """, testNumber);
            System.out.print(getGridAsString(inputGrid));

            long startTime = System.nanoTime();

            int resultNumCoins = StudentSolver.solve(inputGrid);

            long endTime = System.nanoTime();
            testTimes[currentIndex] = (double) (endTime - startTime) / 1_000_000_000;

            String resultsAsString = getGridAsString(inputGrid) +
                    "\nMinimum number of coins: " + resultNumCoins;

            String expectedAsString = getGridAsString(expectedGrid) +
                    "\nMinimum number of coins: " + expectedNumCoins;

            System.out.printf("""
                    
                    -------------------------------
                          Simulated Results %s
                    -------------------------------
                    %s
                    """, testNumber, resultsAsString);

            System.out.printf("""
                    
                    ------------------------------
                          Expected Results %s
                    ------------------------------
                    %s
                    """, testNumber, expectedAsString);

            if (Arrays.deepEquals(inputGrid, expectedGrid) &&
                    resultNumCoins == expectedNumCoins) {
                inputsPassed[currentIndex] = true;
                ++numOfTestsPassed;
            }

            System.out.println("\n=======================================================================================");
        }

        StringBuilder testLog = new StringBuilder();

        for (int i = 0; i < numOfTests; ++i)
            testLog.append("\nTest ").append(i + 1).append(":\t ").append(inputsPassed[i] ? "+ Passed" : "- Failed");
        testLog.append("\n\nTests passed:\t").append(numOfTestsPassed).append(" / ").append(numOfTests);

        System.out.println(testLog);

        System.out.println("\n=======================================================================================");

        StringBuilder timeLog = new StringBuilder();
        double elapsedTime = 0;

        for (double time : testTimes)
            elapsedTime += time;

        for (int i = 0; i < numOfTests; ++i)
            timeLog.append("\nTest ").append(i + 1).append(" time:\t").append(testTimes[i]).append(" seconds");
        timeLog.append("\n\nTotal execution time:\t").append(elapsedTime).append(" seconds");

        System.out.println(timeLog);

        System.out.println("\n=======================================================================================");
    }

    /**
     * Returns the integer grid as a String.
     *
     * @param inputGrid the provided 2D array of integers
     * @return the 2D array as a String
     */
    public static String getGridAsString(int[][] inputGrid) {

        StringBuilder gridToString = new StringBuilder();

        // add each integer from the grid to the string
        for (int[] row : inputGrid) {
            for (int column : row)
                gridToString.append(String.format("%2s", column)).append(" ");
            gridToString.append("\n");
        }

        return gridToString.toString();
    }
}
